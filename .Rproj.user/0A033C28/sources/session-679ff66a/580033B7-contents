# Stebbins 1-15-2024
# This script takes the best fitting model and simulates data with different
# levels of persistent and transient error, and then fits the model

library(TMB)
library(tidyverse)

# load helper functions
source(here("helper", "persistent_transient_cases_helper.R"))

# function for creating obj$sim for MVN_MVN
create_MVNMVN_obj <- function(idat, sim_vectors) {
  
  # Compile the model and load in the functions
  setwd(here("TMB"))
  if(is.loaded("ltSup_MVN_MVN_setnpopsim.cpp")){
    dyn.unload("ltSup_MVN_MVN_setnpopsim.cpp")
  }
  TMB::compile("ltSup_MVN_MVN_setnpopsim.cpp")
  dyn.load("ltSup_MVN_MVN_setnpopsim")
  
  # load the data
  load(here("data-raw", "laketrout_inc_dat.Rdata"))
  
  # Some useful numbers for indexing
  nrec <- nrow(idat)
  nind <- length(unique(idat$idx))
  npop <- length(unique(idat$pop_idx))
  pop_idx_ind <- idat[!duplicated(idat$idx),]$pop_idx #length of nind, values of npop for indexing
  
  # The data to use in the model
  data <- list(
    ind_idx = idat$idx,
    pop_idx_ind = pop_idx_ind,
    ind_idx_sim = sim_vectors$ind_idx_sim,
    pop_idx_ind_sim = sim_vectors$pop_idx_ind_sim,
    npop = npop,
    npop_sim = npop_sim,
    nrec = nrec, 
    nind = nind,
    L = idat$L,
    age = idat$Age,
    maxage = maxage,
    age_sim = sim_vectors$age
  )
  
  # List the parameters and give starting values
  parameters <- list(
    log_sigma = log(1),
    log_sigma_log_Linf_devs = log(30),
    log_sigma_log_K_devs = log(0.05), # log of sd of log K deviations
    log_sigma_log_L1_devs = log(0.05),# need a starting value
    log_sigma_log_Linf_hyper_devs = log(30),
    log_sigma_log_K_hyper_devs = log(0.05),
    log_sigma_log_L1_hyper_devs = log(0.05),
    log_Linf_hyper = log(644),
    log_K_hyper = log(0.10),
    log_L1_hyper = log(100),
    theta1 = 0, # set to 0, = no priors; theta1 = Linf/K
    theta2 = 0,
    theta3 = 0,
    theta4 = 0,
    theta5 = 0,
    theta6 = 0,
    log_sigma_PE = log(4), # sigma for process error estimation
    log_Linf_devs = rep(0, nind), # log of deviations for each individual fish
    log_K_devs = rep(0, nind),
    log_L1_devs = rep(0, nind),
    log_Linf_hyper_devs = rep(0, npop), # log of deviations for population dist.
    log_K_hyper_devs = rep(0, npop),
    log_L1_hyper_devs = rep(0, npop),
    log_PE = rep(0, nrec) # vector for storing process error, no space for cases where age=0
  )
  
  # uncomment thetas for a univariate distribution
  map_par <- list(
  )
  
  # Define the random effects
  RE <- c('log_Linf_devs', 'log_K_devs','log_L1_devs',
          'log_Linf_hyper_devs', 'log_K_hyper_devs', 'log_L1_hyper_devs', 'log_PE')
  
  # Generate the objective function and gradient
  obj <- MakeADFun(
    data = data,
    parameters = parameters,
    DLL = "ltSup_MVN_MVN_setnpopsim",
    random = RE,
    map = map_par
  )
  
  return(list("obj" = obj))
}

# nested function
simulate_data <- function(obj, parameter_list) {
  
  sim_df <- tibble("age" = 0,
                   "sim_length" = 0)
  
  for(i in 1:1000){
    print(paste0("iter: ", i))
    simulate <- obj$simulate(parameter_list, complete = T)
    temp_df <- tibble("age" = simulate$age_sim,
                     "sim_length" = simulate$sim_L_hat,
                     "iter" = i)
    sim_df <- bind_rows(sim_df, temp_df)
  }
  sim_df <- sim_df[-1,]
  return(sim_df)
}

# function for persistent vs transient simulations
run_cases <- function(obj, obj_env_last_par, case) {
  
  # insert placeholders for theta5 and theta6
  original_pars_1 <- obj_env_last_par[1:14]
  original_pars_placeholder <- c("theta5" = 0,
                                 "theta6" = 0)
  original_pars_2 <- obj_env_last_par[15:length(obj_env_last_par)]
  obj_env_last_par <- c(original_pars_1, original_pars_placeholder, 
                             original_pars_2)
  
  if(case == 1) {
    output_data <- simulate_data(obj, obj_env_last_par)
    
  } else if(case == 2) {
    par_list_case_2 <- obj_env_last_par
    par_list_case_2["log_sigma_PE"] <- log(0) # no process error
    output_data <- simulate_data(obj, par_list_case_2)
    
  } else if(case == 3) {
    par_list_case_3 <- obj_env_last_par
    par_list_case_3["log_sigma_log_Linf_devs"] <- log(0) # no persistent error
    par_list_case_3["log_sigma_log_K_devs"] <- log(0)
    par_list_case_3["log_sigma_log_L1_devs"] <- log(0)
    par_list_case_3["log_sigma_log_Linf_hyper_devs"] <- log(0)
    par_list_case_3["log_sigma_log_K_hyper_devs"] <- log(0)
    par_list_case_3["log_sigma_log_L1_hyper_devs"] <- log(0)
    
    output_data <- simulate_data(obj, par_list_case_3)
  } else if(case == 4) {
    par_list_case_4 <- obj_env_last_par
    par_list_case_4["log_sigma_PE"] <- log(0) # no process error
    par_list_case_4["log_sigma_log_Linf_devs"] <- log(0) # no persistent error
    par_list_case_4["log_sigma_log_K_devs"] <- log(0)
    par_list_case_4["log_sigma_log_L1_devs"] <- log(0)
    par_list_case_4["log_sigma_log_Linf_hyper_devs"] <- log(0)
    par_list_case_4["log_sigma_log_K_hyper_devs"] <- log(0)
    par_list_case_4["log_sigma_log_L1_hyper_devs"] <- log(0)
    
    output_data <- simulate_data(obj, par_list_case_4)
    
  } else {
    error("provide a value for case that is either 1, 2, 3, or 4")
  }
  return(output_data)
}

# prepare for simulations ---------------------------------------
# load dataset
load(here("data-raw", "laketrout_inc_dat.Rdata"))
# create sim vectors
maxage <- 50
npop_sim <- 6
sim_vectors = sim_block_vectors(maxage, npop_sim)
# load parameter estimates for simulations
load(here("data", "obj_env_last_par_true.Rdata"))

# create simulation object
obj <- create_MVNMVN_obj(idat, sim_vectors)$obj

# cases ------------------------------------------------------------------
case_1 <- run_cases(obj, obj_env_last_par, 1) |> mutate(case = 1)
case_2 <- run_cases(obj, obj_env_last_par, 2) |> mutate(case = 2)
case_3 <- run_cases(obj, obj_env_last_par, 3) |> mutate(case = 3)
case_4 <- run_cases(obj, obj_env_last_par, 4) |> mutate(case = 4)

all_cases <- bind_rows(case_1, case_2, case_3, case_4) |> 
  mutate(case = as.character(case))

save(all_cases, file = here("data", "persistent_transient_sim_results.Rdata"))



