# list all functions

# for biphasic_sexspecific_models.R ---------------------------------------

# function to write out parameter estimates and standard errors into tibble
format_output_biphasic <- function(sdr, rep) {
  
  fixed <- sdr$par.fixed
  theta_estimates <- unname(sdr$par.fixed)[stringr::str_detect(names(sdr$par.fixed), "theta")] # extract any theta estimates
  
  log_estimates <- unlist(unname(as.list(sdr, what = "Estimate", report = FALSE)[names(fixed)]))
  SEs <- unlist(unname(as.list(sdr, what = "Std. Error", report = FALSE)[names(fixed)]))
  
  estimates <- tibble("parameter" = names(fixed),
                      "log_estimates" = as.numeric(log_estimates),
                      "log_scale_SE" = SEs)
  
  cor_ind <- c(rep$`my_mvn.cov()`[2,1],
               rep$`my_mvn.cov()`[3,1],
               rep$`my_mvn.cov()`[3,2])
  
  cor_ind_names <- c("g_h_ind_cor",
                     "g_L1_ind_cor",
                     "h_L1_ind_cor")
  
  cor_ind_SE <- rep(NA_real_, 3)
  
  correlations_table <- tibble(parameter = cor_ind_names,
                               log_estimates = as.numeric(cor_ind),
                               log_scale_SE = cor_ind_SE)
  
  final_pars <- as_tibble(bind_rows(estimates, correlations_table))
  
  return(final_pars)
}


# create biphasic object for sim
# function for creating obj$sim for MVN_MVN
create_biphasic_obj <- function(sim_vectors) {
  
  # Compile the model and load in the functions
  setwd(here::here("TMB"))
  if(is.loaded("ltSup_biphasic.cpp")){
    dyn.unload("ltSup_biphasic.cpp")
  }
  TMB::compile("ltSup_biphasic.cpp")
  dyn.load("ltSup_biphasic")
  
  # load the data
  load(here::here("data", "incdat_2022_biodat.Rdata"))
  idat <- biodat_save
  
  # Some useful numbers for indexing
  nrec <- nrow(idat)
  nind <- length(unique(idat$idx))
  npop <- length(unique(idat$pop_idx))
  pop_idx_ind <- idat[!duplicated(idat$idx),]$pop_idx #length of nind, values of npop for indexing
  
  # The data to use in the model
  data <- list(
    ind_idx = idat$idx,
    pop_idx_ind = pop_idx_ind,
    ind_idx_sim = sim_vectors$ind_idx_sim,
    pop_idx_ind_sim = sim_vectors$pop_idx_ind_sim,
    npop = npop,
    npop_sim = npop_sim,
    nrec = nrec,
    nind = nind,
    L = idat$L,
    age = idat$Age,
    maxage = maxage,
    age_sim = sim_vectors$age
  )
  
  # List the parameters and give starting values
  parameters <- list(
    log_sigma = log(1),
    log_sigma_log_g_devs = log(0.5),
    log_sigma_log_h_devs = log(0.5), 
    log_sigma_log_L1_devs = log(0.5), 
    log_g_hyper = log(0.2), # 0.2 (Lester 2004), previously 1
    log_h_hyper = log(10),   # 37/42 (Wilson 2019), from Lester 2014 estimate for walleye (0.003), for quince 2008 supplement (50 or 10), h=10 from Lester 2004, mm/year
    log_L1_hyper = log(100),   # starting length for fish at age 1, this is the average of all Ls from idat
    log_g_devs = rep(0, nind), # log of deviations for each individual fish
    log_h_devs = rep(0, nind),
    log_L1_devs = rep(0,nind),
    alpha = 0, # intercept for calculation of age at maturity - previously 83
    log_beta = log(0.1), # slope for calculation of age at maturity - previously 0.5
    theta1 = 0, # set to 0, = no priors; theta1 = g/h
    theta2 = 0, # g/L1
    theta3 = 0, # h/L1
    log_PE = rep(0,nrec), # vector for storing process error, no space for cases where age=0
    log_sigma_PE = log(4) # sigma for process error estimation
  )
  
  # uncomment thetas for a univariate distribution
  map_par <- list(
  )
  
  # Define the random effects
  RE <- c('log_PE', 'log_g_devs', 'log_h_devs', 'log_L1_devs')
  
  # Generate the objective function and gradient
  obj <- MakeADFun(
    data = data,
    parameters = parameters,
    DLL = "ltSup_biphasic",
    random = RE,
    map = map_par
  )
  
  return(list("obj" = obj))
}

# nested function
simulate_biphasic_data <- function(obj, parameter_list) {
  
  sim_df <- tibble("age" = 0,
                   "sim_length" = 0)
  
  for(i in 1:1000){
    print(paste0("iter: ", i))
    simulate <- obj$simulate(parameter_list, complete = T)
    temp_df <- tibble("age" = simulate$age_sim,
                      "sim_length" = simulate$sim_L_hat,
                      "iter" = i)
    sim_df <- bind_rows(sim_df, temp_df)
  }
  sim_df <- sim_df[-1,]
  return(sim_df)
}

# function for persistent vs transient simulations
run_biphasic_cases <- function(obj, obj_env_last_par, case) {
  
  
  if(case == 1) {
    output_data <- simulate_biphasic_data(obj, obj_env_last_par)
    
  } else if(case == 2) {
    par_list_case_2 <- obj_env_last_par
    par_list_case_2["log_sigma_PE"] <- log(0) # no process error
    output_data <- simulate_biphasic_data(obj, par_list_case_2)
    
  } else if(case == 3) {
    par_list_case_3 <- obj_env_last_par
    par_list_case_3["log_sigma_log_g_devs"] <- log(0) # no persistent error
    par_list_case_3["log_sigma_log_h_devs"] <- log(0)
    par_list_case_3["log_sigma_log_L1_devs"] <- log(0)
    
    output_data <- simulate_biphasic_data(obj, par_list_case_3)
  } else if(case == 4) {
    par_list_case_4 <- obj_env_last_par
    par_list_case_4["log_sigma_PE"] <- log(0) # no process error
    par_list_case_4["log_sigma_log_g_devs"] <- log(0) # no persistent error
    par_list_case_4["log_sigma_log_h_devs"] <- log(0)
    par_list_case_4["log_sigma_log_L1_devs"] <- log(0)
    
    output_data <- simulate_biphasic_data(obj, par_list_case_4)
    
  } else {
    error("provide a value for case that is either 1, 2, 3, or 4")
  }
  return(output_data)
}

# function for running sex-specific model
create_BVN_MVN_obj <- function(sim_vectors, male_dat) {
  
  idat <- male_dat
  
  # Compile the model and load in the functions
  setwd(here::here("TMB"))
  if(is.loaded("ltSup_MVN_MVN_setnpopsim")){
    dyn.unload("ltSup_MVN_MVN_setnpopsim")
  }
  TMB::compile("ltSup_MVN_MVN_setnpopsim.cpp")
  dyn.load("ltSup_MVN_MVN_setnpopsim")
  
  # Some useful numbers for indexing
  nrec <- nrow(idat)
  nind <- length(unique(idat$idx))
  npop <- length(unique(idat$pop_idx))
  pop_idx_ind <- idat[!duplicated(idat$idx),]$pop_idx #length of nind, values of npop for indexing
  
  # The data to use in the model
  data <- list(
    ind_idx = idat$idx2,
    pop_idx_ind = pop_idx_ind,
    ind_idx_sim = sim_vectors$ind_idx_sim,
    pop_idx_ind_sim = sim_vectors$pop_idx_ind_sim,
    npop = npop,
    npop_sim = npop_sim,
    nrec = nrec, 
    nind = nind,
    L = idat$L,
    age = idat$Age,
    maxage = maxage,
    age_sim = sim_vectors$age
  )
  
  # List the parameters and give starting values
  parameters <- list(
    log_sigma = log(1),
    log_sigma_log_Linf_devs = log(30),
    log_sigma_log_K_devs = log(0.05), # log of sd of log K deviations
    log_sigma_log_L1_devs = log(0.05),# need a starting value
    log_sigma_log_Linf_hyper_devs = log(30),
    log_sigma_log_K_hyper_devs = log(0.05),
    log_sigma_log_L1_hyper_devs = log(0.05),
    log_Linf_hyper = log(644),
    log_K_hyper = log(0.10),
    log_L1_hyper = log(100),
    theta1 = 0, # set to 0, = no priors; theta1 = Linf/K
    theta2 = 0,
    theta3 = 0,
    theta4 = 0,
    theta5 = 0, 
    theta6 = 0,
    log_sigma_PE = log(4), # sigma for process error estimation
    log_Linf_devs = rep(0, nind), # log of deviations for each individual fish
    log_K_devs = rep(0, nind),
    log_L1_devs = rep(0, nind),
    log_Linf_hyper_devs = rep(0, npop), # log of deviations for population dist.
    log_K_hyper_devs = rep(0, npop),
    log_L1_hyper_devs = rep(0, npop),
    log_PE = rep(0, nrec) # vector for storing process error, no space for cases where age=0
  )
  
  map_par <- list(theta5 = factor(NA),
                  theta6 = factor(NA))
  
  # random effects
  RE <- c('log_Linf_devs', 'log_K_devs','log_L1_devs',
          'log_Linf_hyper_devs', 'log_K_hyper_devs', 'log_L1_hyper_devs', 'log_PE')
  
  # Generate the objective function and gradient
  obj <- MakeADFun(
    data = data,
    parameters = parameters,
    DLL = "ltSup_MVN_MVN_setnpopsim",
    random = RE,
    map = map_par
  )
  
  return(list("obj" = obj))
  
  # # format output into tibble
  # estimates_fit <- format_output(sdr, rep, 
  #                                ind_level = "MVN", 
  #                                pop_level = "BVN") |> 
  #   mutate(log_scale_SE = if_else(log_scale_SE == "NaN", NA_character_, log_scale_SE),
  #          log_scale_SE = as.numeric(log_scale_SE),
  #          log_estimates = round(as.numeric(log_estimates), 5))
  
}

# nested function
simulate_data <- function(obj, parameter_list) {
  
  sim_df <- tibble("age" = 0,
                   "sim_length" = 0)
  
  for(i in 1:1000){
    print(paste0("iter: ", i))
    simulate <- obj$simulate(parameter_list, complete = T)
    temp_df <- tibble("age" = simulate$age_sim,
                      "sim_length" = simulate$sim_L_hat,
                      "iter" = i)
    sim_df <- bind_rows(sim_df, temp_df)
  }
  sim_df <- sim_df[-1,]
  return(sim_df)
}

# function for persistent vs transient simulations
run_cases <- function(obj, obj_env_last_par, case) {
  
  if(case == 1) {
    output_data <- simulate_data(obj, obj_env_last_par)
    
  } else if(case == 2) {
    par_list_case_2 <- obj_env_last_par
    par_list_case_2["log_sigma_PE"] <- log(0) # no process error
    output_data <- simulate_data(obj, par_list_case_2)
    
  } else if(case == 3) {
    par_list_case_3 <- obj_env_last_par
    par_list_case_3["log_sigma_log_Linf_devs"] <- log(0) # no persistent error
    par_list_case_3["log_sigma_log_K_devs"] <- log(0)
    par_list_case_3["log_sigma_log_L1_devs"] <- log(0)
    
    output_data <- simulate_data(obj, par_list_case_3)
  } else if(case == 4) {
    par_list_case_4 <- obj_env_last_par
    par_list_case_4["log_sigma_PE"] <- log(0) # no process error
    par_list_case_4["log_sigma_log_Linf_devs"] <- log(0) # no persistent error
    par_list_case_4["log_sigma_log_K_devs"] <- log(0)
    par_list_case_4["log_sigma_log_L1_devs"] <- log(0)
    
    output_data <- simulate_data(obj, par_list_case_4)
    
  } else {
    error("provide a value for case that is either 1, 2, 3, or 4")
  }
  return(output_data)
}

# for simulation_code_for_HPCC.R ------------------------------------------

# function to write out parameter estimates and standard errors into tibble
# argument "MVN_or_BVN" tells the function whether you fit a model estimating
# theta5 and theta6 at the population level (MVN) or not (BVN)
format_output <- function(sdr, rep, MVN_or_BVN) {
  
  fixed <- sdr$par.fixed
  theta_estimates <- unname(fixed)[stringr::str_detect(names(fixed), "theta")] # extract any theta estimates
  
  SEs <- sqrt(diag(sdr$cov.fixed))
  log_estimates <- sdr$par.fixed
  
  
  estimates <- as.data.frame(cbind(names(fixed), log_estimates, SEs))
  colnames(estimates) <- c('parameter', "log_estimates", "log_scale_SE")
  
  # get correlations
  if(MVN_or_BVN == "BVN") {
    cor <- c(rep$`my_mvn.cov()`[2,1],
             rep$`my_mvn.cov()`[3,1],
             rep$`my_mvn.cov()`[3,2],
             rep$`my_mvn_hyper.cov()`[1,2])
    cor_names <- c("Linf_K_ind_cor",
                   "Linf_L1_ind_cor",
                   "K_L1_ind_cor",
                   "Linf_K_pop_cor")
    cor_SEs <- rep(NA, 4)
  } else if(MVN_or_BVN == "MVN") {
    cor <- c(rep$`my_mvn.cov()`[2,1],
             rep$`my_mvn.cov()`[3,1],
             rep$`my_mvn.cov()`[3,2],
             rep$`my_mvn_hyper.cov()`[1,2],
             rep$`my_mvn_hyper.cov()`[1,3],
             rep$`my_mvn_hyper.cov()`[2,3])
    cor_names <- c("Linf_K_ind_cor",
                   "Linf_L1_ind_cor",
                   "K_L1_ind_cor",
                   "Linf_K_pop_cor",
                   "Linf_L1_pop_cor",
                   "L1_K_pop_cor")
    cor_SEs <- rep(NA, 6)
  }
  
  correlations_table <- as_tibble(cbind(cor_names, cor, cor_SEs))
  names(correlations_table) <- c("parameter", "log_estimates", "log_scale_SE")
  
  final_pars <- as_tibble(bind_rows(estimates, correlations_table))
  
  return(final_pars)
}

# function to convert thetas to correlation values
thetas_to_cor <- function(thetas) {
  # input is a vector of thetas (right now this only works when you have 3 thetas)
  # equation found here: https://kaskr.github.io/adcomp/classdensity_1_1UNSTRUCTURED__CORR__t.html
  
  # create L matrix
  L <- matrix(0, nrow=3, ncol=3)
  diag(L) <- rep(1, 3)
  lower_tri <- lower.tri(L)
  t_lower_tri <- t(lower_tri)
  L[t_lower_tri] <- thetas
  
  # create D
  middle <- L %*% t(L)
  D <- diag(middle)
  Dinvsqrt <- diag(1/sqrt(D))
  
  # create correlation matrix
  cormat <- Dinvsqrt %*% middle %*% Dinvsqrt
  return(cormat)
}

# create age, ind_idx, pop_idx, and pop_ind_idx vectors for simulation block
sim_block_vectors <- function(maxage, npop_sim){
  
  # initialize
  nrec <- maxage * ((maxage + 1)/2)
  nrec_sim <- (maxage * ((maxage + 1)/2)) * npop_sim
  
  ages <- list()
  ind_idx_sim_1 <- list()
  pop_idx_sim <- list()
  
  # age and ind_idx_sim vectors
  for(i in 1:maxage){
    ages[[i]] <- seq(1:i)
    ind_idx_sim_1[[i]] <- rep(i, i)
  }
  ages <- unlist(ages)
  ind_idx_sim_1 <- unlist(ind_idx_sim_1)
  
  age <- rep(ages, npop_sim)
  
  tmp <- list()
  tmp[[1]] <- ind_idx_sim_1
  for(i in 2:npop_sim){
    tmp[[i]] <- rep((i-1) * maxage + ind_idx_sim_1)
  }
  ind_idx_sim <- unlist(tmp)-1
  nind_sim = length(unique(ind_idx_sim))
  
  # now create pop_idx_sim 
  for(i in 1:npop_sim){
    pop_idx_sim[[i]] <- rep(i, nrec)
  }
  pop_idx_sim <- unlist(pop_idx_sim)
  
  sim_age <- data.frame(age, ind_idx_sim, pop_idx_sim)
  
  pop_idx_ind_sim <- unique(sim_age[c('ind_idx_sim', 'pop_idx_sim')])$pop_idx_sim - 1
  
  return(list("age" = age,
              "ind_idx_sim" = ind_idx_sim,
              "pop_idx_sim" = pop_idx_sim,
              "pop_idx_ind_sim" = pop_idx_ind_sim,
              "nrec_sim" = nrec_sim,
              "nind_sim" = nind_sim))
  
}

# function for creating obj$sim for MVN_MVN
# this creates an object "obj" that expects a theta5 and theta6 value 
# and gets called to simulate datasets within simulations
create_MVNMVN_obj <- function(idat, sim_vectors) {
  
  # Compile the model and load in the functions
  setwd(here::here("TMB"))
  if(is.loaded("ltSup_MVN_MVN_setnpopsim.cpp")){
    dyn.unload("ltSup_MVN_MVN_setnpopsim.cpp")
  }
  TMB::compile("ltSup_MVN_MVN_setnpopsim.cpp")
  dyn.load("ltSup_MVN_MVN_setnpopsim")
  
  # load the data
  load(here::here("data", "laketrout_inc_dat.Rdata"))
  
  # Some useful numbers for indexing
  nrec <- nrow(idat)
  nind <- length(unique(idat$idx))
  npop <- length(unique(idat$pop_idx))
  pop_idx_ind <- idat[!duplicated(idat$idx),]$pop_idx #length of nind, values of npop for indexing
  
  # The data to use in the model
  data <- list(
    ind_idx = idat$idx,
    pop_idx_ind = pop_idx_ind,
    ind_idx_sim = sim_vectors$ind_idx_sim,
    pop_idx_ind_sim = sim_vectors$pop_idx_ind_sim,
    npop = npop,
    npop_sim = npop_sim,
    nrec = nrec, 
    nind = nind,
    L = idat$L,
    age = idat$Age,
    maxage = maxage,
    age_sim = sim_vectors$age
  )
  
  # List the parameters and give starting values
  parameters <- list(
    log_sigma = log(0.004),
    log_sigma_log_Linf_devs = log(30),
    log_sigma_log_K_devs = log(0.05), # log of sd of log K deviations
    log_sigma_log_L1_devs = log(0.05),# need a starting value
    log_sigma_log_Linf_hyper_devs = log(30),
    log_sigma_log_K_hyper_devs = log(0.05),
    log_sigma_log_L1_hyper_devs = log(0.05),
    log_Linf_hyper = log(644),
    log_K_hyper = log(0.10),
    log_L1_hyper = log(100),
    theta1 = 0, # set to 0, = no priors; theta1 = Linf/K
    theta2 = 0,
    theta3 = 0,
    theta4 = 0,
    theta5 = 0,
    theta6 = 0,
    log_sigma_PE = log(0.2), # sigma for process error estimation
    log_Linf_devs = rep(0, nind), # log of deviations for each individual fish
    log_K_devs = rep(0, nind),
    log_L1_devs = rep(0, nind),
    log_Linf_hyper_devs = rep(0, npop), # log of deviations for population dist.
    log_K_hyper_devs = rep(0, npop),
    log_L1_hyper_devs = rep(0, npop),
    log_PE = rep(0, nrec) # vector for storing process error, no space for cases where age=0
  )
  
  # uncomment thetas for a univariate distribution
  map_par <- list(
  )
  
  # Define the random effects
  RE <- c('log_Linf_devs', 'log_K_devs','log_L1_devs',
          'log_Linf_hyper_devs', 'log_K_hyper_devs', 'log_L1_hyper_devs', 'log_PE')
  
  # Generate the objective function and gradient
  obj <- MakeADFun(
    data = data,
    parameters = parameters,
    DLL = 'ltSup_MVN_MVN_setnpopsim',
    random = RE,
    map = map_par
  )
  
  return(list("obj" = obj))
}

# this takes in args for npop_sim, fixed, theta5, and theta6 to run 
# a simulation (simulate data and fit) according to specifications
simulate_and_fit <- function(original_parameter_estimates, sim_vectors,
                             theta5, theta6, npop_sim, maxage,
                             fixed, obj_sim){
  
  # change the parameters used to simulate data to have the inputted theta5 or theta6 values
  pars_sim <- original_parameter_estimates
  pars_sim[["theta5"]] <- theta5
  pars_sim[["theta6"]] <- theta6
  
  # simulate a new dataset
  sim_dat <- obj_sim$simulate(pars_sim, complete = T)
  
  # fit the new dataset:
  
  # set new data and parameters
  data_sim <- list(
    ind_idx = sim_vectors$ind_idx_sim, 
    pop_idx_ind = sim_vectors$pop_idx_ind_sim, 
    ind_idx_sim = sim_vectors$ind_idx_sim,
    pop_idx_ind_sim = sim_vectors$pop_idx_ind_sim,
    npop = npop_sim,
    npop_sim = npop_sim,
    nrec = sim_vectors$nrec_sim, 
    nind = maxage * npop_sim,
    L = sim_dat$sim_L_hat, # simulated L
    age = sim_dat$age_sim,
    maxage = maxage,
    age_sim = sim_vectors$age
  )
  
  # use good parameter estimates as starting values
  pars_sim_new <- list(
    log_sigma = unname(pars_sim["log_sigma"]),
    log_sigma_log_Linf_devs = unname(pars_sim["log_sigma_log_Linf_devs"]),
    log_sigma_log_K_devs = unname(pars_sim["log_sigma_log_K_devs"]), 
    log_sigma_log_L1_devs = unname(pars_sim["log_sigma_log_L1_devs"]),
    log_sigma_log_Linf_hyper_devs = unname(pars_sim["log_sigma_log_Linf_hyper_devs"]),
    log_sigma_log_K_hyper_devs = unname(pars_sim["log_sigma_log_K_hyper_devs"]),
    log_sigma_log_L1_hyper_devs = unname(pars_sim["log_sigma_log_L1_hyper_devs"]),
    log_Linf_hyper = unname(pars_sim["log_Linf_hyper"]),
    log_K_hyper = unname(pars_sim["log_K_hyper"]),
    log_L1_hyper = unname(pars_sim["log_L1_hyper"]),
    theta1 = unname(pars_sim["theta1"]),
    theta2 = unname(pars_sim["theta2"]),
    theta3 = unname(pars_sim["theta3"]),
    theta4 = unname(pars_sim["theta4"]),
    theta5 = unname(pars_sim["theta5"]),
    theta6 = unname(pars_sim["theta6"]),
    log_sigma_PE = unname(pars_sim["log_sigma_PE"]),
    log_Linf_devs = rep(0, sim_vectors$nind_sim),
    log_K_devs = rep(0, sim_vectors$nind_sim),
    log_L1_devs = rep(0, sim_vectors$nind_sim),
    log_Linf_hyper_devs = rep(0, npop_sim),
    log_K_hyper_devs = rep(0, npop_sim),
    log_L1_hyper_devs = rep(0, npop_sim),
    log_PE = rep(0, sim_vectors$nrec_sim)
  )
  
  if(fixed == TRUE){
    # don't estimate theta5 and theta6
    map_par <- list(
      theta5 = factor(NA),
      theta6 = factor(NA)
    )
  } else {
    map_par <- list()
  }
  
  RE <- c('log_Linf_devs', 'log_K_devs','log_L1_devs',
          'log_Linf_hyper_devs', 'log_K_hyper_devs', 'log_L1_hyper_devs', 'log_PE')
  
  obj_sim <- MakeADFun(
    data = data_sim,
    parameters = pars_sim_new,
    DLL = 'ltSup_MVN_MVN_setnpopsim',
    random = RE,
    map = map_par
  )
  
  # if model fit errors out, set error_out to TRUE
  error_out <- tryCatch({nlminb(start = obj_sim$par, 
                                objective = obj_sim$fn, 
                                gradient = obj_sim$gr)
    error_out <- FALSE},
    error = function(e) {
      error_out <- TRUE
    })
  
  # if model errored out, return an tibble filled with NAs
  if(error_out) {
    estimates_sim <- tibble("parameter" = rep(NA, 20),
                            "log_estimates" = rep(NA, 20),
                            "log_scale_SE" = rep(NA, 20))
  } else{
    rep_sim <- obj_sim$report()
    sdr_sim <- sdreport(obj_sim)
    
    # output
    if(fixed == TRUE){
      estimates_sim <- format_output(sdr_sim, rep_sim, MVN_or_BVN = "BVN")
    } else {
      estimates_sim <- format_output(sdr_sim, rep_sim, MVN_or_BVN = "MVN")
    }
  }
  
  
  return(estimates_sim)
}


# this calls simulate_and_fit and run_simulations according to the 
# specified number of simulations (nsims)
run_simulations <- function(nsims, original_parameter_estimates,
                            sim_vectors, theta5, theta6,
                            npop_sim, maxage, fixed, obj_sim){
  output <- list()
  converged <- as.logical(rep(NA, nsims))
  
  for(i in 1:nsims) {
    
    output[[i]] <- simulate_and_fit(original_parameter_estimates,
                                    sim_vectors, theta5,
                                    theta6, npop_sim, maxage,
                                    fixed = fixed,
                                    obj_sim) |> 
      dplyr::mutate(sim = i,
                    log_scale_SE = ifelse(log_scale_SE == "NaN", NA, log_scale_SE))
    
    # check if simulate_and_fit returned an empty tibble (error out)
    if(sum(is.na(output[[i]]$parameter)) > 0) {
      converged[i] <- FALSE
      # check if simulate_and_fit returned a table with more than one NA for
      # log_scale_SE
    } else if(fixed == TRUE & sum(is.na(output[[i]]$log_scale_SE)) > 4) {
      converged[i] <- FALSE
    } else if(fixed == FALSE & sum(is.na(output[[i]]$log_scale_SE)) > 6) {
      converged[i] <- FALSE
    } else{
      converged[i] <- TRUE
    }
  }
  
  print(converged)
  raw_output <- do.call(rbind, output)
  
  return(list("raw_output" = raw_output,
              "prop_converged" = sum(converged)/nsims))
  
}


# get quantiles of standard error by joining to original model fit
get_relative_error_old <- function(case_x_output_clean, true_estimates_fit) {
  
  cases_not_estimating_thetas <- case_x_output_clean %>% 
    filter(!case %in% c("C", "D", "G", "H"))
  
  theta5_vec <- tibble(parameter = "theta5", log_estimates = as.character(0))
  theta6_vec <- tibble(parameter = "theta6", log_estimates = as.character(0))
  
  estimates_fit_without_thetas <- estimates_fit %>%
    bind_rows(theta5_vec, theta6_vec) %>%
    mutate(true_vals = as.numeric(log_estimates)) %>%
    dplyr::select(true_vals, parameter)
  
  summary_without_thetas <- cases_not_estimating_thetas %>%
    left_join(estimates_fit_without_thetas,
              by = "parameter") %>%
    mutate(log_scale_SE = as.numeric(log_scale_SE),
           log_estimates = as.numeric(log_estimates),
           relative_error = (log_estimates - true_vals) / true_vals,
           median_relative_error = median(relative_error),
           lower_quartile = quantile(relative_error, 0.25),
           upper_quartile = quantile(relative_error, 0.75))
  
  
  if(sum(case_x_output_clean$case %in% c("C", "D", "G", "H")) > 1){
    
    cases_estimating_thetas <- case_x_output_clean %>% 
      filter(case %in% c("C", "D", "G", "H"))
    
    theta5_vec <- tibble(parameter = "theta5", log_estimates = as.character(0.58))
    theta6_vec <- tibble(parameter = "theta6", log_estimates = as.character(0.58))
    
    estimates_fit_with_thetas <- estimates_fit %>%
      bind_rows(theta5_vec, theta6_vec) %>%
      mutate(true_vals = as.numeric(log_estimates)) %>%
      dplyr::select(true_vals, parameter)
    
    summary_with_thetas <- cases_estimating_thetas %>% 
      left_join(estimates_fit_with_thetas,
                by = "parameter") %>%
      mutate(log_scale_SE = as.numeric(log_scale_SE),
             log_estimates = as.numeric(log_estimates),
             relative_error = (log_estimates - true_vals) / true_vals,
             median_relative_error = median(relative_error),
             lower_quartile = quantile(relative_error, 0.25),
             upper_quartile = quantile(relative_error, 0.75))
  } 
  
  
  final_summary <- bind_rows(summary_without_thetas, summary_with_thetas)
  
  return(final_summary)
}

# function to create boxplot
plot_summarized_parallel_output_old <- function(all_cases_with_RE, plot_theta4) {
  if(plot_theta4) {
    p <- all_cases_with_RE %>% 
      filter(!parameter %in% c("K_L1_ind_cor", "Linf_K_ind_cor",
                               "Linf_K_pop_cor", "Linf_L1_ind_cor")) %>% 
      ggplot(aes(x = parameter, y = relative_error)) + geom_boxplot(coef = 0, outlier.shape = NA) + 
      theme_minimal() + 
      facet_wrap(~case, ncol = 1)
  } else {
    p <- all_cases_with_RE %>% 
      filter(!parameter %in% c("theta4", "K_L1_ind_cor", "Linf_K_ind_cor",
                               "Linf_K_pop_cor", "Linf_L1_ind_cor")) %>% 
      ggplot(aes(x = parameter, y = relative_error)) + geom_boxplot(coef = 0, outlier.shape = NA) +
      theme_minimal() + 
      facet_wrap(~case, ncol = 1)
  }
  p + theme(axis.text.x = element_text(angle = 45, hjust=1)) + 
    ylab("Relative Error") + ylim(c(-0.25, 0.25))
}

